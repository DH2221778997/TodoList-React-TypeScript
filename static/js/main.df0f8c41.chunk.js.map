{"version":3,"sources":["Components/TodoTask.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoTask","_ref","task","completeTask","_jsxs","className","children","_jsx","taskName","deadline","onClick","App","setTask","useState","setDealine","todoList","setTodoList","handleChange","event","target","name","value","Number","taskNameToDelete","filter","type","placeholder","onChange","addTask","newTask","map","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"sKA0BeA,MAlBEC,IAAoC,IAAnC,KAAEC,EAAI,aAAEC,GAAqBF,EAC7C,OACEG,eAAA,OAAKC,UAAU,OAAMC,SAAA,CACnBF,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBC,cAAA,QAAAD,SAAOJ,EAAKM,WACZD,cAAA,QAAAD,SAAOJ,EAAKO,cAEdF,cAAA,UACEG,QAASA,KACPP,EAAaD,EAAKM,SAAS,EAC3BF,SACH,QAGG,ECmCKK,MApDCA,KACd,MAAOT,EAAMU,GAAWC,mBAAiB,KAClCJ,EAAUK,GAAcD,mBAAiB,IACzCE,EAAUC,GAAeH,mBAAkB,IAE5CI,EAAgBC,IACM,SAAtBA,EAAMC,OAAOC,KACfR,EAAQM,EAAMC,OAAOE,OAErBP,EAAWQ,OAAOJ,EAAMC,OAAOE,OACjC,EAUIlB,EAAgBoB,IACpBP,EACED,EAASS,QAAQtB,GACRA,EAAKM,WAAae,IAE5B,EAGH,OACEnB,eAAA,OAAKC,UAAU,MAAKC,SAAA,CAClBF,eAAA,OAAKC,UAAU,SAAQC,SAAA,CACrBF,eAAA,OAAKC,UAAU,iBAAgBC,SAAA,CAC7BC,cAAA,SAAOkB,KAAK,OAAOC,YAAY,UAAUN,KAAK,OAAOC,MAAOnB,EAAMyB,SAAUV,IAC5EV,cAAA,SACEkB,KAAK,SACLC,YAAY,wBACZN,KAAK,WACLC,MAAOZ,EACPkB,SAAUV,OAGdV,cAAA,UAAQG,QA5BEkB,KACd,MAAMC,EAAU,CAAErB,SAAUN,EAAMO,SAAUA,GAC5CO,EAAY,IAAID,EAAUc,IAC1BjB,EAAQ,IACRE,EAAW,EAAE,EAwBgBR,SAAC,gBAE5BC,cAAA,OAAKF,UAAU,WAAUC,SACtBS,EAASe,KAAI,CAAC5B,EAAa6B,IACnBxB,cAACP,EAAQ,CAAWE,KAAMA,EAAMC,aAAcA,GAA/B4B,SAGtB,ECvCKC,MAZUC,IACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKlC,IAAkD,IAAjD,OAAEmC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASvC,EACpEmC,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EAAY,GAExB,ECNFQ,IAASC,OACPnC,cAACoC,IAAMC,WAAU,CAAAtC,SACfC,cAACI,EAAG,MAENkC,SAASC,eAAe,SAM1Bd,G","file":"static/js/main.df0f8c41.chunk.js","sourcesContent":["import React from \"react\";\nimport { ITask } from \"../Interfaces\";\n\ninterface Props {\n  task: ITask;\n  completeTask(taskNameToDelete: string): void;\n}\n\nconst TodoTask = ({ task, completeTask }: Props) => {\n  return (\n    <div className=\"task\">\n      <div className=\"content\">\n        <span>{task.taskName}</span>\n        <span>{task.deadline}</span>\n      </div>\n      <button\n        onClick={() => {\n          completeTask(task.taskName);\n        }}\n      >\n        X\n      </button>\n    </div>\n  );\n};\n\nexport default TodoTask;\n","import React, { FC, ChangeEvent, useState } from 'react';\nimport './App.css';\nimport TodoTask from './Components/TodoTask';\nimport { ITask } from './Interfaces';\n\nconst App: FC = () => {\n  const [task, setTask] = useState<string>('');\n  const [deadline, setDealine] = useState<number>(0);\n  const [todoList, setTodoList] = useState<ITask[]>([]);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    if (event.target.name === 'task') {\n      setTask(event.target.value);\n    } else {\n      setDealine(Number(event.target.value));\n    }\n  };\n\n  const addTask = (): void => {\n    const newTask = { taskName: task, deadline: deadline };\n    setTodoList([...todoList, newTask]);\n    setTask('');\n    setDealine(0);\n  };\n\n  const completeTask = (taskNameToDelete: string): void => {\n    setTodoList(\n      todoList.filter((task) => {\n        return task.taskName !== taskNameToDelete;\n      })\n    );\n  };\n\n  return (\n    <div className='App'>\n      <div className='header'>\n        <div className='inputContainer'>\n          <input type='text' placeholder='Task...' name='task' value={task} onChange={handleChange} />\n          <input\n            type='number'\n            placeholder='Deadline (in Days)...'\n            name='deadline'\n            value={deadline}\n            onChange={handleChange}\n          />\n        </div>\n        <button onClick={addTask}>Add Task</button>\n      </div>\n      <div className='todoList'>\n        {todoList.map((task: ITask, key: number) => {\n          return <TodoTask key={key} task={task} completeTask={completeTask} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}